{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nexport const SelectedUsers = createSlice({\n  name: 'selectedUsers',\n  initialState: {\n    All_IDs: [],\n    Selected_IDs: [],\n    all_selected: false\n  },\n  reducers: {\n    UpdateAll: (state, action) => {\n      if (action.payload) {\n        state.All_IDs = [...action.payload];\n      }\n    },\n    UpdateSelected: (state, action) => {\n      if (action.payload) {\n        state.Selected_IDs = [...action.payload];\n        state.all_selected = false;\n      }\n    },\n    Update_All_selected: (state, action) => {\n      state.all_selected = action.payload;\n    },\n    Reset_all_checkboxes: (state, action) => {\n      state.all_selected = false;\n      state.Selected_IDs = [];\n    }\n  }\n});\nexport const Messages = createSlice({\n  name: 'selectedUsers',\n  initialState: {\n    Error_message: null,\n    Success_Message: null\n  },\n  reducers: {\n    UpdateErrorMessage: (state, action) => {\n      if (action.payload == 'reset') {\n        state.Error_message = null;\n      } else {\n        if (action.payload) state.Error_message = action.payload;\n      }\n    },\n    UpdateSuccessMessage: (state, action) => {\n      if (action.payload == 'reset') {\n        state.Success_Message = null;\n      } else {\n        if (action.payload) state.Success_Message = action.payload;\n      }\n    }\n  }\n});\nconst StatesBase = combineReducers({\n  SelectedUsers: SelectedUsers.reducer,\n  Alerts: Messages.reducer\n});\nexport default StatesBase;","map":{"version":3,"names":["createSlice","configureStore","combineReducers","SelectedUsers","name","initialState","All_IDs","Selected_IDs","all_selected","reducers","UpdateAll","state","action","payload","UpdateSelected","Update_All_selected","Reset_all_checkboxes","Messages","Error_message","Success_Message","UpdateErrorMessage","UpdateSuccessMessage","StatesBase","reducer","Alerts"],"sources":["C:/Users/heybr/OneDrive/Desktop/Task4 front/src/redux/reducers.js"],"sourcesContent":["import { createSlice, configureStore } from '@reduxjs/toolkit'\r\nimport { combineReducers } from 'redux';\r\n\r\n\r\nexport const SelectedUsers = createSlice({\r\n    name: 'selectedUsers',\r\n\r\n    initialState: {\r\n    All_IDs: [],\r\n    Selected_IDs: [],\r\n    all_selected: false,\r\n    },\r\n    \r\n    reducers: {\r\n    UpdateAll: (state, action) => {\r\n        if (action.payload) {\r\n        state.All_IDs = [...action.payload];\r\n        \r\n        }\r\n    },\r\n    UpdateSelected: (state, action) => {\r\n        if (action.payload) {\r\n        state.Selected_IDs = [...action.payload];\r\n        state.all_selected = false\r\n        }\r\n    },\r\n\r\n    Update_All_selected: (state, action) => {\r\n        state.all_selected = action.payload\r\n    },\r\n\r\n    Reset_all_checkboxes: (state, action) => {\r\n        state.all_selected = false\r\n        state.Selected_IDs = []\r\n    },\r\n    },\r\n});\r\n\r\nexport const Messages = createSlice({\r\n    name: 'selectedUsers',\r\n\r\n    initialState: {\r\n        Error_message: null,\r\n        Success_Message: null,\r\n    },\r\n    \r\n    reducers: {\r\n    UpdateErrorMessage: (state, action) => {\r\n        \r\n        if (action.payload == 'reset') {\r\n            state.Error_message = null\r\n        }\r\n\r\n        else {\r\n            if (action.payload)\r\n                state.Error_message = action.payload\r\n        }\r\n    },\r\n\r\n    UpdateSuccessMessage: (state, action) => {\r\n\r\n        if (action.payload == 'reset') {\r\n            state.Success_Message = null\r\n        }\r\n        else {\r\n            if (action.payload)\r\n                state.Success_Message = action.payload\r\n        }\r\n    }\r\n    },\r\n});\r\n\r\n\r\nconst StatesBase = combineReducers({\r\n    SelectedUsers: SelectedUsers.reducer,\r\n    Alerts: Messages.reducer,\r\n});\r\n\r\nexport default StatesBase;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAC9D,SAASC,eAAe,QAAQ,OAAO;AAGvC,OAAO,MAAMC,aAAa,GAAGH,WAAW,CAAC;EACrCI,IAAI,EAAE,eAAe;EAErBC,YAAY,EAAE;IACdC,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE,EAAE;IAChBC,YAAY,EAAE;EACd,CAAC;EAEDC,QAAQ,EAAE;IACVC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1B,IAAIA,MAAM,CAACC,OAAO,EAAE;QACpBF,KAAK,CAACL,OAAO,GAAG,CAAC,GAAGM,MAAM,CAACC,OAAO,CAAC;MAEnC;IACJ,CAAC;IACDC,cAAc,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC/B,IAAIA,MAAM,CAACC,OAAO,EAAE;QACpBF,KAAK,CAACJ,YAAY,GAAG,CAAC,GAAGK,MAAM,CAACC,OAAO,CAAC;QACxCF,KAAK,CAACH,YAAY,GAAG,KAAK;MAC1B;IACJ,CAAC;IAEDO,mBAAmB,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACpCD,KAAK,CAACH,YAAY,GAAGI,MAAM,CAACC,OAAO;IACvC,CAAC;IAEDG,oBAAoB,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MACrCD,KAAK,CAACH,YAAY,GAAG,KAAK;MAC1BG,KAAK,CAACJ,YAAY,GAAG,EAAE;IAC3B;EACA;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMU,QAAQ,GAAGjB,WAAW,CAAC;EAChCI,IAAI,EAAE,eAAe;EAErBC,YAAY,EAAE;IACVa,aAAa,EAAE,IAAI;IACnBC,eAAe,EAAE;EACrB,CAAC;EAEDV,QAAQ,EAAE;IACVW,kBAAkB,EAAEA,CAACT,KAAK,EAAEC,MAAM,KAAK;MAEnC,IAAIA,MAAM,CAACC,OAAO,IAAI,OAAO,EAAE;QAC3BF,KAAK,CAACO,aAAa,GAAG,IAAI;MAC9B,CAAC,MAEI;QACD,IAAIN,MAAM,CAACC,OAAO,EACdF,KAAK,CAACO,aAAa,GAAGN,MAAM,CAACC,OAAO;MAC5C;IACJ,CAAC;IAEDQ,oBAAoB,EAAEA,CAACV,KAAK,EAAEC,MAAM,KAAK;MAErC,IAAIA,MAAM,CAACC,OAAO,IAAI,OAAO,EAAE;QAC3BF,KAAK,CAACQ,eAAe,GAAG,IAAI;MAChC,CAAC,MACI;QACD,IAAIP,MAAM,CAACC,OAAO,EACdF,KAAK,CAACQ,eAAe,GAAGP,MAAM,CAACC,OAAO;MAC9C;IACJ;EACA;AACJ,CAAC,CAAC;AAGF,MAAMS,UAAU,GAAGpB,eAAe,CAAC;EAC/BC,aAAa,EAAEA,aAAa,CAACoB,OAAO;EACpCC,MAAM,EAAEP,QAAQ,CAACM;AACrB,CAAC,CAAC;AAEF,eAAeD,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}